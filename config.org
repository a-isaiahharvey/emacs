#+author: Allister Isaiah Harvey
#+description: AIH's personal Emacs config
#+startup: showeverything
#+options: toc:3

* Table Of Contents :toc:
- [[#important-programs-to-load-first][Important Programs To Load First]]
  - [[#adding-the-scripts-directory-to-path][Adding the scripts directory to path]]
  - [[#sourcing-the-scripts][Sourcing the scripts]]
  - [[#load-evil-mode][Load Evil Mode]]
  - [[#general-keybindings][General Keybindings]]
- [[#reload-emacs][Reload Emacs]]
- [[#text-editor][Text Editor]]
  - [[#dashboard][Dashboard]]
  - [[#font][Font]]
  - [[#menubar-toolbars-and-scrollbars][Menubar, Toolbars and Scrollbars]]
  - [[#display-line-numbers-and-truncated-lines][Display Line Numbers and Truncated Lines]]
  - [[#mouse-support-for-terminal][Mouse Support for Terminal]]
  - [[#clipboard-support-for-terminal][Clipboard Support for Terminal]]
  - [[#transparency][Transparency]]
  - [[#code-completion][Code Completion]]
- [[#workbench][Workbench]]
  - [[#syntax-checking][Syntax Checking]]
  - [[#local-history][Local History]]
  - [[#themes][Themes]]
- [[#features][Features]]
  - [[#terminal][Terminal]]
  - [[#org-mode][Org Mode]]
- [[#language-server-protocal][Language Server Protocal]]
- [[#languages][Languages]]
  - [[#python][Python]]
  - [[#rust][Rust]]
  - [[#swift][Swift]]
- [[#packages][Packages]]
  - [[#which-key][WHICH-KEY]]
  - [[#rainbow-mode][Rainbow Mode]]
  - [[#rainbow-delimiters][Rainbow Delimiters]]
  - [[#projectile][Projectile]]
  - [[#perspective][Perspective]]
  - [[#org-auto-tangle][org-auto-tangle]]

* Important Programs To Load First
** Adding the scripts directory to path

#+begin_src emacs-lisp
  (add-to-list 'load-path "~/.config/emacs/scripts/")
#+end_src

** Sourcing the scripts

#+begin_src emacs-lisp
  (require 'elpaca-setup)  ;; The Elpaca Package Manager
  (require 'buffer-move)   ;; Buffer-move for better window management
  (require 'utils)
#+end_src

** Load Evil Mode

#+begin_src emacs-lisp
  (use-package evil
    :init         ;; tweak evil's configuration before loading it
    (setq evil-want-integration t) ;; This is optional since it's already set to true
    (setq evil-want-keybinding nil)
    (setq evil-vsplit-window-right t)
    (setq evil-split-window-below t)
    (evil-mode))
  (use-package evil-collection
    :after evil
    :config
    (setq evil-collection-mode-list '(dashboard dired ibuffer))
    (evil-collection-init))
  (use-package evil-tutor)

  ;;Turns off elpaca-use-package-mode current declaration
  ;;Note this will cause the declaration to be interpreted immediately (not deferred).
  ;;Useful for configuring built-in emacs features.
  (use-package emacs :elpaca nil :config (setq ring-bell-function #'ignore))

  ;; Don't install anything. Defer execution of BODY
  (elpaca nil (message "deferred"))

  ;; Displayes cursor correctly in the terminal
  (if (is-in-terminal)
      (use-package evil-terminal-cursor-changer
        :init(evil-terminal-cursor-changer-activate))) ; or (etcc-on)
#+end_src

** General Keybindings

#+begin_src emacs-lisp
  (use-package general
    :config
    (general-evil-setup)

    ;; setup up 'SPC' as the global leader key
    (general-create-definer aih/leader-keys
      :states '(normal insert virtual emacs)
      :keymaps 'override
      :prefix "SPC" ;; set leader
      :global-prefix "M-SPC") ;; access leader in insert mode

    (aih/leader-keys
      "." '(find-file :wk "Find file")
      "f c" '((lambda () (interactive) (find-file (concat user-emacs-directory "config.org"))) :wk "Edit emacs config")
      "TAB TAB" '(comment-line :wk "Comment lines"))

    (aih/leader-keys
      "b" '(:ignore t :wk "buffer")
      "bb" '(switch-to-buffer :wk "Switch buffer")
      "bk" '(kill-this-buffer :wk "Kill this buffer")
      "bn" '(next-buffer :wk "Next buffer")
      "bp" '(previous-buffer :wk "Previous buffer")
      "br" '(revert-buffer :wk "Revert buffer"))

    (aih/leader-keys
      "e" '(:ignore t :wk "Evaluate")
      "e b" '(eval-buffer :wk "Evaluate elisp in buffer")
      "e d" '(eval-defun :wk "Evaluate defun containing or after point")
      "e e" '(eval-expression :wk "Evaluate and elisp expression")
      "e l" '(eval-last-sexp :wk "Evaluate elisp expression before point")
      "e r" '(eval-region :wk "Evaluate elisp in region"))

    (aih/leader-keys
      "h" '(:ignore t :wk "Help")
      "h f" '(describe-function :wk "Describe function")
      "h v" '(describe-variable :wk "Describe variable")
      ;;"h r r" '((lambda () (interactive) (load-file "~/.config/emacs/init.el")) :wk "Reload emacs config"))
      "h r r" '(reload-init-file :wk "Reload emacs config"))

    (aih/leader-keys
      "t" '(:ignore t :wk "Toggle")
      "t l" '(display-line-numbers-mode :wk "Toggle line numbers")
      "t t" '(visual-line-mode :wk "Toggle truncated lines"))

    (aih/leader-keys
      "w" '(:ignore t :wk "Windows")
      ;; Window splits
      "w c" '(evil-window-delete :wk "Close window")
      "w n" '(evil-window-new :wk "New window")
      "w s" '(evil-window-split :wk "Horizontal split window")
      "w v" '(evil-window-vsplit :wk "Vertical split window")
      ;; Window motions
      "w h" '(evil-window-left :wk "Window left")
      "w j" '(evil-window-down :wk "Window down")
      "w k" '(evil-window-up :wk "Window up")
      "w l" '(evil-window-right :wk "Window right")
      "w w" '(evil-window-next :wk "Goto next window")
      ;; Move Windows
      "w H" '(buf-move-left :wk "Buffer move left")
      "w J" '(buf-move-down :wk "Buffer move down")
      "w K" '(buf-move-up :wk "Buffer move up")
      "w L" '(buf-move-right :wk "Buffer move right"))
    )

#+end_src

* Reload Emacs
This is just an example of how to create a simple function in Emacs.  Use this function to reload Emacs after adding changes to the config.  Yes, I am loading the user-init-file twice in this function, which is a hack because for some reason, just loading the user-init-file once does not work properly.

#+begin_src emacs-lisp
  (defun reload-init-file ()
    (interactive)
    (load-file user-init-file)
    (load-file user-init-file))
#+end_src



* Text Editor
Let's make GNU Emacs look a little better.

** Dashboard
Emacs Dashboard is an extensible startup screen showing you recent files, bookmarks, agenda items and an Emacs banner.

#+begin_src emacs-lisp
  (use-package dashboard
    :ensure t
    :init
    (setq initial-buffer-choice 'dashboard-open)
    (setq dashboard-set-heading-icons t)
    (setq dashboard-set-file-icons t)
    (setq dashboard-banner-logo-title "Emacs Is More Than A Text Editor!")
    ;;(setq dashboard-startup-banner 'logo) ;; use standard emacs logo as banner
    (setq dashboard-startup-banner 'official)  ;; use official Emacs logo as banner
    (setq dashboard-center-content nil) ;; set to 't' for centered content
    (setq dashboard-items '((recents . 5)
                            (agenda . 5 )
                            (bookmarks . 3)
                            (projects . 3)
                            (registers . 3)))
    :custom
    (dashboard-modify-heading-icons '((recents . "file-text")
                                      (bookmarks . "book")))
    :if (< (length command-line-args) 2)
    :config
    (dashboard-setup-startup-hook))
#+end_src

** Font
Defining the various fonts that Emacs will use.

#+begin_src emacs-lisp
  (set-face-attribute 'default nil
                      :font "Cascadia Code"
                      :height 110
                      :weight 'medium)
  (set-face-attribute 'variable-pitch nil
                      :font "Courier New"
                      :height 120
                      :weight 'medium)
  (set-face-attribute 'fixed-pitch nil
                      :font "Cascadia Code"
                      :height 110
                      :weight 'medium)
  ;; Makes commented text and keywords italics.
  ;; This is working in emacsclient but not emacs.
  ;; Your font must have an italic face available.
  (set-face-attribute 'font-lock-comment-face nil
                      :slant 'italic)
  (set-face-attribute 'font-lock-keyword-face nil
                      :slant 'italic)

  ;; This sets the default font on all graphical frames created after restarting Emacs.
  ;; Does the same thing as 'set-face-attribute default' above, but emacsclient fonts
  ;; are not right unless I also add this method of setting the default font.
  (add-to-list 'default-frame-alist '(font . "Cascadia Code"))

  ;; Uncomment the following line if line spacing needs adjusting.
  (setq-default line-spacing 0.12)

#+end_src

*** Zooming In/Out
You can use the bindings CTRL plus =/- for zooming in/out.  You can also use CTRL plus the mouse wheel for zooming in/out.

#+begin_src emacs-lisp
  (global-set-key (kbd "C-=") 'text-scale-increase)
  (global-set-key (kbd "C--") 'text-scale-decrease)
  (global-set-key (kbd "<C-wheel-up>") 'text-scale-increase)
  (global-set-key (kbd "<C-wheel-down>") 'text-scale-decrease)
#+end_src

** Menubar, Toolbars and Scrollbars
#+begin_src emacs-lisp
  (if (and (eq system-type 'darwin) (not (is-in-terminal))) ;; enables menubar for macOS
      (menu-bar-mode t)
    (menu-bar-mode -1)
    )
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
#+end_src

** Display Line Numbers and Truncated Lines
#+begin_src emacs-lisp
  (global-display-line-numbers-mode 1)
  (global-visual-line-mode t)
#+end_src

** Mouse Support for Terminal
#+begin_src emacs-lisp
  (if (is-in-terminal)
      (xterm-mouse-mode 1))
#+end_src

** Clipboard Support for Terminal
#+begin_src emacs-lisp
  (if (is-in-terminal)
      (use-package xclip
        :init (xclip-mode 1)))
#+end_src

** Transparency

#+begin_src emacs-lisp
  (set-frame-parameter nil 'alpha-background 70)
  (add-to-list 'default-frame-alist '(alpha-background . 70))

  ;;(set-frame-parameter (selected-frame) 'alpha '(<active> . <inactive>))
  ;;(set-frame-parameter (selected-frame) 'alpha <both>)
  (set-frame-parameter (selected-frame) 'alpha '(85 . 50))
  (add-to-list 'default-frame-alist '(alpha . (85 . 50)))
#+end_src

Toggle transparency with ~C-c t~

#+begin_src emacs-lisp
  (defun toggle-transparency ()
    (interactive)
    (let ((alpha (frame-parameter nil 'alpha)))
      (set-frame-parameter
       nil 'alpha
       (if (eql (cond ((numberp alpha) alpha)
                      ((numberp (cdr alpha)) (cdr alpha))
                      ;; Also handle undocumented (<active> <inactive>) form.
                      ((numberp (cadr alpha)) (cadr alpha)))
                100)
           '(85 . 50) '(100 . 100)))))
  (global-set-key (kbd "C-c t") 'toggle-transparency)
#+end_src

** Code Completion
#+begin_src emacs-lisp
  (use-package company :ensure t)
#+end_src

*** Ivy (Counsel)
+ Ivy, a generic completion mechanism for Emacs.
+ Counsel, a collection of Ivy-enhanced versions of common Emacs commands.
+ Ivy-rich allows us to add descriptions alongside the commands in M-x.

#+begin_src emacs-lisp
  (use-package counsel
    :after ivy
    :config (counsel-mode))

  (use-package ivy
    :bind
    ;; ivy-resume resumes the last Ivy-based completion.
    (("C-c C-r" . ivy-resume)
     ("C-x B" . ivy-switch-buffer-other-window))
    :custom
    (setq ivy-use-virtual-buffers t)
    (setq ivy-count-format "(%d/%d) ")
    (setq enable-recursive-minibuffers t)
    :config
    (ivy-mode))

  (use-package all-the-icons-ivy-rich
    :ensure t
    :init (all-the-icons-ivy-rich-mode 1))

  (use-package ivy-rich
    :after ivy
    :ensure t
    :init (ivy-rich-mode 1) ;; this gets us descriptions in M-x.
    :custom
    (ivy-virtual-abbreviate 'full
                            ivy-rich-switch-buffer-align-virtual-buffer t
                            ivy-rich-path-style 'abbrev)
    :config
    (ivy-set-display-transformer 'ivy-switch-buffer
                                 'ivy-rich-switch-buffer-transformer))
#+end_src

* Workbench
** Syntax Checking

#+begin_src emacs-lisp
  (use-package flycheck
    :hook ('after-init-hook #'global-flycheck-mode))
#+end_src

** Local History
Controls whether local file history is enabled. When enabled, the file contents of an editor that is saved will be stored to a backup location to be able to restore or review the contents later

#+begin_src emacs-lisp
  (setq backup-directory-alist `((".*" . ,temporary-file-directory))
        backup-by-copying t    ; Don't delink hardlinks
        version-control t      ; Use version numbers on backups
        delete-old-versions t  ; Automatically delete excess backups
        kept-new-versions 20   ; how many of the newest versions to keep
        kept-old-versions 5    ; and how many of the old
        )
#+end_src

** Themes
*** Dracula
#+begin_src emacs-lisp
  (use-package dracula-theme
    :ensure t
    :load-path "themes"
    :init
    (setq dracula-theme-kit t)
    :config
    (load-theme 'dracula t)
    )
#+end_src


* Features
** Terminal
*** Vterm
**** Get VTerm
#+begin_src emacs-lisp
  (use-package vterm
    :ensure t
    :config (setq vterm-max-scrollback 5000))
#+end_src
**** Toggle
#+begin_src emacs-lisp
  (use-package vterm-toggle
    :after vterm
    :config
    ;; When running programs in Vterm and in 'normal' mode, make sure that ESC
    ;; kills the program as it would in most standard terminal programs.
    (evil-define-key 'normal vterm-mode-map (kbd "<escape>") 'vterm--self-insert)
    (setq vterm-toggle-fullscreen-p nil)
    (setq vterm-toggle-scope 'project)
    (add-to-list 'display-buffer-alist
                 '((lambda (buffer-or-name _)
                     (let ((buffer (get-buffer buffer-or-name)))
                       (with-current-buffer buffer
                         (or (equal major-mode 'vterm-mode)
                             (string-prefix-p vterm-buffer-name (buffer-name buffer))))))
                   (display-buffer-reuse-window display-buffer-at-bottom)
                   ;;(display-buffer-reuse-window display-buffer-in-direction)
                   ;;display-buffer-in-direction/direction/dedicated is added in emacs27
                   ;;(direction . bottom)
                   ;;(dedicated . t) ;dedicated is supported in emacs27
                   (reusable-frames . visible)
                   (window-height . 0.4))))
#+end_src
** Org Mode
*** Enabling Table of Contents
#+begin_src emacs-lisp
  (use-package toc-org
    :commands toc-org-enable
    :init (add-hook 'org-mode-hook 'toc-org-enable))
#+end_src

*** Enabling Org Bullets
Org-bullets gives us attractive bullets rather than asterisks.

#+begin_src emacs-lisp
  (add-hook 'org-mode-hook 'org-indent-mode)
  (use-package org-bullets)
  (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
#+end_src

*** Disable Electric Indent
Org mode source blocks have some really weird and annoying default indentation behavior.  I think this has to do with electric-indent-mode, which is turned on by default in Emacs.  So let's turn it OFF!

#+begin_src emacs-lisp
  (electric-indent-mode -1)
#+end_src

*** Source Code Block Tag Expansion
Org-tempo is not a separate package but a module within org that can be enabled.  Org-tempo allows for '<s' followed by TAB to expand to a begin_src tag.  Other expansions available include:

| Typing the below + TAB | Expands to ...                          |
|------------------------+-----------------------------------------|
| <a                     | '#+BEGIN_EXPORT ascii' … '#+END_EXPORT  |
| <c                     | '#+BEGIN_CENTER' … '#+END_CENTER'       |
| <C                     | '#+BEGIN_COMMENT' … '#+END_COMMENT'     |
| <e                     | '#+BEGIN_EXAMPLE' … '#+END_EXAMPLE'     |
| <E                     | '#+BEGIN_EXPORT' … '#+END_EXPORT'       |
| <h                     | '#+BEGIN_EXPORT html' … '#+END_EXPORT'  |
| <l                     | '#+BEGIN_EXPORT latex' … '#+END_EXPORT' |
| <q                     | '#+BEGIN_QUOTE' … '#+END_QUOTE'         |
| <s                     | '#+BEGIN_SRC' … '#+END_SRC'             |
| <v                     | '#+BEGIN_VERSE' … '#+END_VERSE'         |


#+begin_src emacs-lisp
  (require 'org-tempo)
#+end_src

*** Org-Remoting

#+begin_src emacs-lisp
  (use-package org-remoteimg :elpaca (:host github :repo "gaoDean/org-remoteimg"))

  ;; optional: set this to wherever you want the cache to be stored
  ;; (setq url-cache-directory "~/.cache/emacs/url")

  (setq org-display-remote-inline-images 'cache) ;; enable caching
#+end_src

*** Babel
#+begin_src emacs-lisp
  (setq org-confirm-babel-evaluate nil
        org-src-fontify-natively t
        org-src-tab-acts-natively t)

  (org-babel-do-load-languages
   'org-babel-load-languages
   '((emacs-lisp . t)
     (perl       . t)
     (python     . t)
     (js         . t)
     (css        . t)
     (sass       . t)
     (C          . t)
     (java       . t)
     (shell      . t))
   )
#+end_src

*** Visuals
**** Org-Modern

#+begin_src emacs-lisp
  (use-package org-modern
    :hook (org-mode . org-modern-mode)
    :config
    (setq org-modern-star '("◉" "○" "✸" "✿" "✤" "✜" "◆" "▶")
          org-modern-table-vertical 1
          org-modern-table-horizontal 0.2
          org-modern-list '((43 . "➤")
                            (45 . "–")
                            (42 . "•"))
          org-modern-todo-faces
          '(("TODO" :inverse-video t :inherit org-todo)
            ("PROJ" :inverse-video t :inherit +org-todo-project)
            ("STRT" :inverse-video t :inherit +org-todo-active)
            ("[-]"  :inverse-video t :inherit +org-todo-active)
            ("HOLD" :inverse-video t :inherit +org-todo-onhold)
            ("WAIT" :inverse-video t :inherit +org-todo-onhold)
            ("[?]"  :inverse-video t :inherit +org-todo-onhold)
            ("KILL" :inverse-video t :inherit +org-todo-cancel)
            ("NO"   :inverse-video t :inherit +org-todo-cancel))
          org-modern-footnote
          (cons nil (cadr org-script-display))
          org-modern-block-fringe nil
          org-modern-block-name
          '((t . t)
            ("src" "»" "«")
            ("example" "»–" "–«")
            ("quote" "❝" "❞")
            ("export" "⏩" "⏪"))
          org-modern-progress nil
          org-modern-priority nil
          org-modern-horizontal-rule (make-string 36 ?─)
          org-modern-keyword
          '((t . t)
            ("title" . "𝙏")
            ("subtitle" . "𝙩")
            ("author" . "𝘼")
            ("email" . #("" 0 1 (display (raise -0.14))))
            ("date" . "𝘿")
            ("property" . "☸")
            ("options" . "⌥")
            ("startup" . "⏻")
            ("macro" . "𝓜")
            ("bind" . #("" 0 1 (display (raise -0.1))))
            ("bibliography" . "")
            ("print_bibliography" . #("" 0 1 (display (raise -0.1))))
            ("cite_export" . "⮭")
            ("print_glossary" . #("ᴬᶻ" 0 1 (display (raise -0.1))))
            ("glossary_sources" . #("" 0 1 (display (raise -0.14))))
            ("include" . "⇤")
            ("setupfile" . "⇚")
            ("html_head" . "🅷")
            ("html" . "🅗")
            ("latex_class" . "🄻")
            ("latex_class_options" . #("🄻" 1 2 (display (raise -0.14))))
            ("latex_header" . "🅻")
            ("latex_header_extra" . "🅻⁺")
            ("latex" . "🅛")
            ("beamer_theme" . "🄱")
            ("beamer_color_theme" . #("🄱" 1 2 (display (raise -0.12))))
            ("beamer_font_theme" . "🄱𝐀")
            ("beamer_header" . "🅱")
            ("beamer" . "🅑")
            ("attr_latex" . "🄛")
            ("attr_html" . "🄗")
            ("attr_org" . "⒪")
            ("call" . #("" 0 1 (display (raise -0.15))))
            ("name" . "⁍")
            ("header" . "›")
            ("caption" . "☰")
            ("results" . "🠶")))
    )
#+end_src

* Language Server Protocal
#+begin_src emacs-lisp
  (use-package lsp-mode
    :init
    ;; set prefix for lsp-command-keymap (few alternatives - "C-l", "C-c l")
    (setq lsp-keymap-prefix "C-c l")
    :hook (;; if you want which-key integration
           (lsp-mode . lsp-enable-which-key-integration))
    :commands lsp)

  ;; optionally
  (use-package lsp-ui :commands lsp-ui-mode)
  ;; if you are helm user
  (use-package helm-lsp :commands helm-lsp-workspace-symbol)
  ;; if you are ivy user
  (use-package lsp-ivy :commands lsp-ivy-workspace-symbol)
  (use-package lsp-treemacs :commands lsp-treemacs-errors-list)

  ;; optionally if you want to use debugger
  (use-package dap-mode)
  ;; (use-package dap-LANGUAGE) to load the dap adapter for your language
#+end_src

* Languages
** Python
#+begin_src emacs-lisp
  (use-package lsp-pyright
    :ensure t
    :hook (python-mode . (lambda ()
                           (require 'lsp-pyright)
                           (lsp))))  ; or lsp-deferred
#+end_src

** Rust
*** rustic
Buffers are pretty great, but sometimes they can be named ... less usefully.

#+begin_src emacs-lisp
  (use-package rustic)
#+end_src

** Swift
*** lsp-sourcekit
#+begin_src emacs-lisp
  (use-package lsp-sourcekit
    :after lsp-mode
    :config
    (setq lsp-sourcekit-executable (string-trim (shell-command-to-string "xcrun --find sourcekit-lsp"))))
#+end_src

*** swift-mode
#+begin_src emacs-lisp
  (use-package swift-mode
    :hook (swift-mode . (lambda () (lsp))))
#+end_src


* Packages
** WHICH-KEY
#+begin_src emacs-lisp
  (use-package which-key
    :init
    (which-key-mode 1)
    :config
    (setq which-key-side-window-location 'bottom
          which-key-sort-order #'which-key-key-order-alpha
          which-key-sort-uppercase-first nil
          which-key-add-column-padding 1
          which-key-max-display-columns nil
          which-key-min-display-lines 6
          which-key-side-window-slot -10
          which-key-side-window-max-height 0.25
          which-key-idle-delay 0.8
          which-key-max-description-length 25
          which-key-allow-imprecise-window-fit t
          which-key-separator " → " ))
#+end_src

** Rainbow Mode
Display the actual color as a background for any hex color value (ex. #ffffff).  The code block below enables rainbow-mode in all programming modes (prog-mode) as well as org-mode, which is why rainbow works in this document.

#+begin_src emacs-lisp
  (use-package rainbow-mode
    :diminish
    :hook org-mode prog-mode)
#+End_src

** Rainbow Delimiters
Adding rainbow coloring to parentheses.

#+begin_src emacs-lisp
  (use-package rainbow-delimiters
    :hook ((emacs-lisp-mode . rainbow-delimiters-mode)
           (clojure-mode . rainbow-delimiters-mode)))
#+end_src

** Projectile

#+begin_src emacs-lisp
  (use-package projectile
    :config
    (projectile-mode 1)
    (if (eq system-type 'darwin)
        (define-key projectile-mode-map (kbd "s-p") 'projectile-command-map) ;; Recommended keymap prefix on macOS
      (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map) ;; Recommended keymap prefix on Windows/Linux
      )
    )
#+end_src

** Perspective
Perspective provides multiple named workspaces (or “perspectives”) in Emacs, similar to multiple desktops in window managers.  Each perspective has its own buffer list and its own window layout, along with some other isolated niceties, like the xref ring.

#+begin_src emacs-lisp
  (use-package perspective
    :custom
    ;; NOTE! I have also set 'SCP =' to open the perspective menu.
    ;; I'm only setting the additional binding because setting it
    ;; helps suppress an annoying warning message.
    (persp-mode-prefix-key (kbd "C-c M-p"))
    :init
    (persp-mode)
    :config
    ;; Sets a file to write to when we save states
    (setq persp-state-default-file "~/.config/emacs/sessions"))

  ;; This will group buffers by persp-name in ibuffer.
  (add-hook 'ibuffer-hook
            (lambda ()
              (persp-ibuffer-set-filter-groups)
              (unless (eq ibuffer-sorting-mode 'alphabetic)
                (ibuffer-do-sort-by-alphabetic))))

  ;; Automatically save perspective states to file when Emacs exits.
  (add-hook 'kill-emacs-hook #'persp-state-save)
#+end_src
** org-auto-tangle
a simple emacs package to allow org file tangling upon save
#+begin_src emacs-lisp
  (use-package org-auto-tangle
    :load-path "site-lisp/org-auto-tangle/"    ;; this line is necessary only if you cloned the repo in your site-lisp directory 
    :defer t
    :hook (org-mode . org-auto-tangle-mode))
#+end_src
